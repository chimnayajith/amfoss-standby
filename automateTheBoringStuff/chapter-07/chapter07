1. re.compile()

2. to prevent backslash characters

3. search()

4. group()

5. group 0 gives the whole match. group 1 gies the first value inside the paranthesis. group 2 gives the second.

6. by using backslashes.

7. if there are no groups a list . otherwise a tuple

8. the pipe(|) characters denotes or. either the first or the second string to be included

9. non greedy matching or it means zero or one of the preceeding group.

10. + - one or more
    * - zero or more

11. {3} means the group should be repeated exactly 3 times. {3,5} means it can be repeated from 3 to 5 times.

12. they signify digit , word or space.

13. they signify anything except digit , word , space respectively.

14. .* is a greedy match whereas .*? is a non greedy match.

15. [a-z0-9]

16. re.IGNORECASE is given as the second parameter to re.compile()

17. if re.DOTALL is passed, then the . in the regex will also match with new line characters

18. X drummers, X pipers, fice rings , X hens.

19. it allows to spread the regex across diff lines and add comments and it can also have whitespaces.

20. [^\d{1,3}(,\d{3})*$]

21. [A-Z][a-z]*\sWatanabe

22. re.compile(r'[(Alice|Bob|Carol)\s(eats|pets|throws)\s(apples|cats|baseballs)\.]',re.IGNORECASE)
